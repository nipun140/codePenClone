{"version":3,"sources":["components/Editor.jsx","App.js","index.js"],"names":["Editor","props","language","displayTitle","value","onChange","customStyle","useState","isExpand","setisExpand","style","className","onClick","prevValue","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","lineNumbers","autoCloseTags","matchBrackets","extraKeys","mode","theme","keyMap","App","initialHtml","initialCss","initialJs","localStorage","getItem","JSON","parse","setItem","stringify","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","htmlDisplay","setHtmlDisplay","cssDisplay","setCssDisplay","jsDisplay","setJsDisplay","htmlRef","useRef","cssRef","jsRef","window","innerWidth","windowWidth","setWindowWidth","handleResize","current","useEffect","console","log","addEventListener","removeEventListener","timeOutId","setTimeout","clearTimeout","color","e","display","title","frameBorder","sandbox","width","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60dd31f4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"codemirror/lib/codemirror.css\"; //import the style sheet\r\nimport \"codemirror/theme/material.css\"; //import the theme css sheet\r\nimport \"codemirror/mode/xml/xml\"; //import the languages features for all 3\r\nimport \"codemirror/mode/css/css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/addon/display/autorefresh\";\r\nimport \"codemirror/addon/comment/comment\";\r\nimport \"codemirror/addon/edit/matchbrackets\";\r\nimport \"codemirror/keymap/sublime\";\r\nimport \"codemirror/theme/monokai.css\";\r\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\r\nimport { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function Editor(props) {\r\n  const { language, displayTitle, value, onChange, customStyle } = props;\r\n\r\n  function handleChange(editor, data, value) {\r\n    //calling the sethyml/css/js functions on App.jsx via the props\r\n    onChange(value);\r\n  }\r\n\r\n  const [isExpand, setisExpand] = useState(false);\r\n\r\n  //toggle class\r\n  function handleClick() {\r\n    setisExpand((prevValue) => {\r\n      return !prevValue;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={customStyle}\r\n        className={`editor-container ${isExpand ? \"expanded\" : \"\"}`}\r\n      >\r\n        <div className=\"editor-title\">\r\n          <span>{displayTitle}</span>\r\n          <button onClick={handleClick}>\r\n            <FontAwesomeIcon icon={isExpand ? faCompressAlt : faExpandAlt} />\r\n          </button>\r\n        </div>\r\n        <ControlledEditor\r\n          onBeforeChange={handleChange}\r\n          value={value}\r\n          className=\"code-mirror-wrapper\"\r\n          options={{\r\n            lineWrapping: true,\r\n            lint: true,\r\n            lineNumbers: true,\r\n            autoCloseTags: true,\r\n            matchBrackets: true,\r\n            extraKeys: { \"Ctrl-Space\": \"autocomplete\" },\r\n            mode: language,\r\n            theme: \"material\",\r\n            keyMap: \"sublime\",\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\nimport Editor from \"./components/Editor\";\nimport { useState, useRef } from \"react\";\n\nfunction App() {\n  let initialHtml, initialCss, initialJs;\n  if (localStorage.getItem(\"codePenData\") !== null) {\n    initialHtml = JSON.parse(localStorage.getItem(\"codePenData\"))[0];\n    initialCss = JSON.parse(localStorage.getItem(\"codePenData\"))[1];\n    initialJs = JSON.parse(localStorage.getItem(\"codePenData\"))[2];\n  } else {\n    initialHtml = \"\";\n    initialCss = \"\";\n    initialJs = \"\";\n    localStorage.setItem(\n      \"codePenData\",\n      JSON.stringify([initialHtml, initialCss, initialJs])\n    );\n  }\n\n  const [html, setHtml] = useState(initialHtml);\n  const [css, setCss] = useState(initialCss);\n  const [js, setJs] = useState(initialJs);\n  const [srcDoc, setSrcDoc] = useState(\"\");\n  const [htmlDisplay, setHtmlDisplay] = useState(true);\n  const [cssDisplay, setCssDisplay] = useState(true);\n  const [jsDisplay, setJsDisplay] = useState(true);\n\n  const htmlRef = useRef(true);\n  const cssRef = useRef(true);\n  const jsRef = useRef(true);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  //update the ref values of html,css,js according to resize condition\n  if (windowWidth >= 768) {\n    htmlRef.current = true;\n    cssRef.current = true;\n    jsRef.current = true;\n  } else {\n    htmlRef.current = true;\n    cssRef.current = false;\n    jsRef.current = false;\n  }\n\n  //track the change in ref of html,css,js and fire dom-re-render when ref values change\n  useEffect(() => {\n    console.log(\" ref change riggered\");\n    setHtmlDisplay(htmlRef.current);\n    setCssDisplay(cssRef.current);\n    setJsDisplay(jsRef.current);\n  }, [htmlRef.current, cssRef.current, jsRef.current]);\n\n  //window width\n  function handleResize() {\n    setWindowWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  //update the bottom-panel to display the the html,css,js changes after a delay of 250s\n  useEffect(() => {\n    const timeOutId = setTimeout(() => {\n      setSrcDoc(\n        `<html><head><style>${css}</style></head><body>${html}</body><script>${js}</script></html>`\n      );\n    }, 250);\n    return () => {\n      clearTimeout(timeOutId);\n    };\n  }, [html, css, js]);\n\n  //update the Local Stroge when any of these values changes\n  useEffect(() => {\n    localStorage.setItem(\"codePenData\", JSON.stringify([html, css, js]));\n  }, [html, css, js]);\n\n  //toggle functions when buttons are clicked\n  function toggleHtml() {\n    setHtmlDisplay(true);\n    setCssDisplay(false);\n    setJsDisplay(false);\n  }\n  function toggleCss(e) {\n    setHtmlDisplay(false);\n    setCssDisplay(true);\n    setJsDisplay(false);\n  }\n  function toggleJs(e) {\n    setHtmlDisplay(false);\n    setCssDisplay(false);\n    setJsDisplay(true);\n  }\n\n  return (\n    <>\n      <div className=\"pane-container\">\n        <div className=\"pane top-pane\">\n          <div className=\"buttons\">\n            <button\n              style={{ color: htmlDisplay ? \"yellow\" : \"white\" }}\n              onClick={toggleHtml}\n            >\n              HTML\n            </button>\n            <button\n              style={{ color: cssDisplay ? \"yellow\" : \"white\" }}\n              onClick={toggleCss}\n            >\n              CSS\n            </button>\n            <button\n              style={{ color: jsDisplay ? \"yellow\" : \"white\" }}\n              onClick={toggleJs}\n            >\n              JS\n            </button>\n          </div>\n          <Editor\n            language=\"xml\"\n            customStyle={{ display: htmlDisplay ? \"flex\" : \"none\" }}\n            displayTitle=\"HTML\"\n            value={html}\n            onChange={setHtml}\n          />\n          <Editor\n            language=\"css\"\n            customStyle={{ display: cssDisplay ? \"flex\" : \"none\" }}\n            displayTitle=\"CSS\"\n            value={css}\n            onChange={setCss}\n          />\n          <Editor\n            language=\"javascript\"\n            customStyle={{ display: jsDisplay ? \"flex\" : \"none\" }}\n            displayTitle=\"JS\"\n            value={js} //control the components\n            onChange={setJs}\n          />\n        </div>\n        <div className=\"pane bottom-pane\">\n          <iframe\n            srcDoc={srcDoc}\n            title=\"output \"\n            frameBorder=\"0\"\n            sandbox=\"allow-scripts\"\n            width=\"100%\"\n            height=\"100%\"\n          ></iframe>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}